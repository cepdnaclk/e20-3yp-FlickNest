/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.05.2025 18:30:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1568;
#else
constexpr int kTensorArenaSize = 544;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[10] = { -0.012726050801575184, 0.091276399791240692, 0.23418760299682617, 0.16997060179710388, -0.040207840502262115, 0.056767802685499191, -0.0084869200363755226, -0.10448582470417023, 0.05833008885383606, 0.008521202951669693, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data2[20] = { -0.017503082752227783, -0.06895168125629425, 0.048516169190406799, -0.0065627121366560459, -0.040350820869207382, -0.036963298916816711, -0.0041242986917495728, -0.015782777220010757, 0.010581628419458866, -0.00044875478488393128, -0.050663270056247711, -0.0015617340104654431, -0.089937426149845123, -0.098725661635398865, 0.15322591364383698, 0.067780852317810059, 0.022309077903628349, -0.093269847333431244, -0.053330343216657639, -0.041048284620046616, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data3[4] = { 0.019689109176397324, 0.076140604913234711, -0.058377616107463837, 0.031259942799806595, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data4[20*33] = { 
  -0.55885970592498779, -0.38481265306472778, 0.29641655087471008, 0.26244017481803894, 0.125348761677742, -0.29834941029548645, -0.14817935228347778, -0.39319360256195068, -0.055034976452589035, -0.39659467339515686, -0.18262667953968048, 0.32459118962287903, -0.3562430739402771, -0.047665581107139587, -0.13047990202903748, 0.19289462268352509, 0.16355666518211365, 0.36087661981582642, -0.07511613517999649, -0.071134805679321289, 0.38096299767494202, -0.028660083189606667, 1.0421738624572754, 0.13817894458770752, -0.37415516376495361, 0.22272786498069763, -0.14412474632263184, 0.76862359046936035, -0.057761982083320618, -0.1696561723947525, 0.23049399256706238, 0.22676895558834076, 0.32111862301826477, 
  -0.3942950963973999, 0.04661986231803894, 0.20172995328903198, -0.027380868792533875, -0.028494184836745262, 0.12410997599363327, 0.1729167252779007, 0.16836170852184296, 0.21437881886959076, 0.3741985559463501, -0.14367108047008514, 0.071835920214653015, 0.11317546665668488, -0.0079007381573319435, 0.13407620787620544, -0.10889881104230881, 0.3268255889415741, 0.23217076063156128, 0.40434896945953369, -0.12930092215538025, 0.013415691442787647, 0.036262296140193939, 0.20619878172874451, -0.13187089562416077, 0.099595837295055389, 0.091537073254585266, 0.0092759691178798676, 0.30865567922592163, -0.011098721995949745, -0.17458830773830414, 0.016981728374958038, 0.37818384170532227, 0.3548811674118042, 
  0.60063838958740234, -0.15894819796085358, -0.63109230995178223, -0.19483543932437897, 0.13386230170726776, 0.38668671250343323, 0.36135974526405334, 0.38773486018180847, 0.4024067223072052, 0.027550455182790756, -0.17908424139022827, -0.29092413187026978, -0.49045747518539429, -0.085079699754714966, -0.17445038259029388, 0.19824233651161194, -0.04578825831413269, 0.058828268200159073, -0.056924037635326385, 0.088960424065589905, 0.24000093340873718, -0.37778496742248535, -0.34008020162582397, -0.46969953179359436, -0.15508046746253967, -0.025590507313609123, 0.35913541913032532, 0.15733864903450012, -0.1225268766283989, -0.24966311454772949, -0.23207402229309082, 0.13077068328857422, 0.064025342464447021, 
  -0.280760258436203, 0.18061469495296478, -0.18277449905872345, 0.19053559005260468, -0.020363211631774902, 0.19978012144565582, -0.025873005390167236, 0.32786446809768677, 0.1711791604757309, -0.27433386445045471, 0.27652344107627869, 0.2648673951625824, 0.16767358779907227, 0.19792763888835907, 0.13602077960968018, -0.067012988030910492, -0.2469104677438736, -0.15444500744342804, 0.11685952544212341, 0.21584080159664154, -0.21081550419330597, 0.14182327687740326, -0.21510747075080872, -0.13101522624492645, 0.19384518265724182, 0.16221269965171814, -0.23111438751220703, 0.20352128148078918, 0.28371763229370117, 0.2220691591501236, -0.14103761315345764, 0.143773153424263, 0.28424155712127686, 
  0.25059172511100769, 0.080898962914943695, 0.060590662062168121, -0.24319581687450409, -0.28654485940933228, -0.19473828375339508, 0.32248392701148987, -0.036428026854991913, -0.11442593485116959, 0.23883125185966492, -0.05532454326748848, 0.0188760906457901, -0.24914409220218658, -0.11286333203315735, -0.2708570659160614, 0.13852307200431824, 0.23088337481021881, 0.25838315486907959, 0.010697894729673862, -0.037362750619649887, 0.0037638074718415737, 0.34513431787490845, -0.11205598711967468, -0.072684705257415771, -0.062524333596229553, -0.028388343751430511, 0.19546481966972351, 0.20778995752334595, -0.28124329447746277, -0.23509699106216431, 0.18370969593524933, -0.1780511736869812, 0.33203563094139099, 
  -0.49189400672912598, 0.31558796763420105, -0.052955992519855499, -0.022217677906155586, -0.034671500325202942, -0.59423840045928955, -0.10269937664270401, 0.23129798471927643, -0.18689572811126709, 0.035214412957429886, -0.36827355623245239, 0.096834510564804077, -0.22461926937103271, 0.029864395037293434, 0.0058040805160999298, -0.084455937147140503, -0.20757278800010681, 0.18945935368537903, -0.025441797450184822, 0.10430461168289185, -0.17391259968280792, -0.21746674180030823, 0.48154270648956299, -0.25695285201072693, 0.11397584527730942, -0.089393436908721924, 0.11045317351818085, 0.20882108807563782, 0.00013315540854819119, 0.44013988971710205, 0.031198881566524506, 0.062744200229644775, 0.3587949275970459, 
  -0.32470038533210754, 0.3656100332736969, 0.2196422815322876, -0.16814835369586945, -0.13306893408298492, -0.84387898445129395, -0.34169977903366089, 0.042132571339607239, -0.28537735342979431, -0.10034544765949249, -0.14768815040588379, 0.47927621006965637, 0.55103939771652222, 0.17963241040706635, 0.16310183703899384, 0.026223557069897652, 0.11244415491819382, 0.021468568593263626, 0.38253971934318542, 0.27677449584007263, -0.090595118701457977, 0.12675906717777252, 0.5867881178855896, 0.29114535450935364, -0.18668484687805176, -0.031178047880530357, 0.33317914605140686, 0.085127495229244232, 0.30887418985366821, 0.13755810260772705, 0.32888436317443848, -0.19342978298664093, 0.13945867121219635, 
  0.16187645494937897, -0.25574192404747009, 0.039313226938247681, 0.26209807395935059, 0.25195223093032837, 0.16474063694477081, 0.090936295688152313, 0.18814855813980103, -0.08883260190486908, 0.34099572896957397, -0.060907591134309769, 0.24834819138050079, -0.13947063684463501, 0.05097486823797226, -0.23326332867145538, -0.34981095790863037, -0.085170537233352661, -0.17563493549823761, -0.19850879907608032, 0.35277605056762695, 0.31803187727928162, -0.18047076463699341, -0.19679154455661774, -0.048840433359146118, -0.13983577489852905, 0.34181219339370728, -0.065325766801834106, 0.15303066372871399, -0.34755021333694458, -0.048130381852388382, 0.040384881198406219, 0.27877748012542725, 0.014114459976553917, 
  0.34308543801307678, 0.33939218521118164, 0.17821551859378815, -0.0072560105472803116, -0.27335765957832336, 0.27613747119903564, -0.020050963386893272, -0.19792363047599792, -0.023583220317959785, -0.067321650683879852, 0.051790211349725723, 0.48657602071762085, 0.24075154960155487, -0.13821561634540558, 0.11827090382575989, -0.053552757948637009, 0.15991251170635223, -0.15369947254657745, 0.32534721493721008, 0.034038133919239044, 0.27740225195884705, 0.22220872342586517, 0.13701322674751282, 0.1121368482708931, 0.19047702848911285, 0.26567143201828003, 0.26701286435127258, -0.10365922003984451, 0.23586912453174591, -0.34094288945198059, 0.15643011033535004, -0.35031500458717346, -0.063786618411540985, 
  -0.68363791704177856, 0.15561786293983459, -0.30420055985450745, 0.016792144626379013, -0.19309940934181213, 0.13110810518264771, -0.37026980519294739, -0.052096426486968994, -0.24950471520423889, -0.39063078165054321, -0.37134543061256409, -0.33921441435813904, -0.35139420628547668, -0.12065777182579041, -0.1894608736038208, 0.21986164152622223, -0.039010148495435715, 0.22466982901096344, 0.28905308246612549, -0.13276179134845734, -0.021781470626592636, 0.23345322906970978, 0.63544386625289917, 0.26858121156692505, 0.28794759511947632, 0.31132927536964417, 0.031531486660242081, 0.45760577917098999, 0.12984174489974976, 0.26416563987731934, -0.049709435552358627, -0.026420598849654198, -0.1882038414478302, 
  0.27021011710166931, 0.12851537764072418, 0.10017544031143188, -0.37108558416366577, -0.21274745464324951, -0.082861326634883881, 0.24491329491138458, 0.10460371524095535, 0.030260015279054642, 0.16138528287410736, -0.20238526165485382, 0.050744283944368362, 0.13923941552639008, -0.30946671962738037, 0.10767954587936401, -0.14290963113307953, 0.044885050505399704, 0.047716852277517319, 0.16872522234916687, 0.12294401228427887, -0.23310013115406036, 0.20621614158153534, -0.35585185885429382, 0.20996764302253723, 0.22472234070301056, -0.11060207337141037, -0.10865382850170135, -0.054494272917509079, 0.28770151734352112, 0.27694261074066162, -0.26929616928100586, -0.21368107199668884, -0.2129548192024231, 
  -0.65942704677581787, 0.22376210987567902, 0.18350407481193542, -0.034256625920534134, -0.11669455468654633, -0.4609520435333252, 0.17374891042709351, -0.26441913843154907, 0.10490608215332031, -0.1858113706111908, 0.15791253745555878, 0.54692399501800537, 0.30318707227706909, 0.16760063171386719, -0.053609572350978851, 0.27700215578079224, -0.063718400895595551, -0.02871900238096714, 0.36867019534111023, 0.090734787285327911, -0.00075043243123218417, -0.027548087760806084, 1.2361469268798828, -0.14865750074386597, -0.046291302889585495, 0.18822468817234039, 0.23096954822540283, 0.64846986532211304, 0.46173283457756042, 0.21964971721172333, 0.081637725234031677, 0.017675720155239105, 0.097094707190990448, 
  0.31924447417259216, -0.086818352341651917, -0.17357385158538818, -0.17694604396820068, 0.14336831867694855, 0.12488173693418503, 0.071721330285072327, -0.092969410121440887, -0.03565666452050209, 0.37285917997360229, 0.18822982907295227, -0.32939457893371582, 0.35857939720153809, 0.077934436500072479, -0.19688856601715088, 0.16671712696552277, 0.20146064460277557, -0.056569550186395645, 0.29406744241714478, -0.1047947034239769, 0.1856500655412674, 0.26384198665618896, -0.86765789985656738, 0.14508692920207977, 0.10751964896917343, -0.1710602194070816, 0.036684427410364151, -0.7632020115852356, 0.08803238719701767, -0.23082141578197479, -0.26328688859939575, 0.0026725227944552898, -0.3697885274887085, 
  0.0036764014512300491, -0.29896432161331177, -0.089072823524475098, -0.1073218509554863, 0.22381988167762756, 0.39532977342605591, -0.18541282415390015, 0.41788816452026367, 0.064442940056324005, 0.19328054785728455, 0.17085199058055878, 0.019875884056091309, 0.35644295811653137, 0.093669645488262177, -0.14047141373157501, -0.28338164091110229, -0.22141657769680023, 0.035820364952087402, -0.18061582744121552, -0.031970765441656113, -0.15783263742923737, -0.16276182234287262, -0.20566388964653015, -0.093546345829963684, -0.01737535372376442, -0.44087430834770203, -0.30777576565742493, 0.23418298363685608, -0.051170740276575089, 0.051330599933862686, 0.15119506418704987, -0.2561013400554657, -0.18204088509082794, 
  0.83233642578125, -0.75899702310562134, -0.82302439212799072, 0.17190845310688019, 0.026056878268718719, 0.38834196329116821, -0.036677896976470947, 0.17778502404689789, 0.18290276825428009, 0.091278031468391418, 0.29556643962860107, -0.84769046306610107, -0.9794924259185791, 0.10002098977565765, -0.21648979187011719, -0.093256600201129913, -0.73129212856292725, -0.30761459469795227, -0.014648014679551125, -0.41967856884002686, 0.05196317657828331, 0.091345019638538361, -0.69248634576797485, -0.16282197833061218, -0.74028831720352173, -0.054147455841302872, 0.03687763586640358, 0.054600641131401062, 0.28120264410972595, -0.15940575301647186, 0.15992650389671326, -0.39841356873512268, -0.38826233148574829, 
  0.63079774379730225, 0.45287495851516724, -0.55235928297042847, -0.19271868467330933, -0.15197655558586121, 0.58738577365875244, 0.12952886521816254, 0.18378251791000366, 0.24651642143726349, 0.20820045471191406, 0.11691050976514816, 0.07681400328874588, 0.17074292898178101, 0.060050420463085175, 0.18815127015113831, 0.23896691203117371, -0.021762924268841743, 0.015649484470486641, -0.008255750872194767, 0.046250425279140472, -0.44068899750709534, 0.19314178824424744, -1.0753216743469238, 0.16075795888900757, 0.35613134503364563, 0.077947892248630524, -0.0068601774983108044, -0.68427866697311401, -0.23383027315139771, -0.33475464582443237, -0.087558887898921967, -0.27774819731712341, -0.26408615708351135, 
  -0.58980286121368408, -0.18354097008705139, -0.16516484320163727, -0.0157645083963871, 0.26420512795448303, -0.36280718445777893, -0.30839958786964417, -0.39920341968536377, -0.039649628102779388, -0.42100962996482849, -0.45716777443885803, 0.051879830658435822, 0.052830599248409271, 0.091030038893222809, -0.10276048630475998, 0.11086875945329666, -0.24660801887512207, -0.11143168807029724, 0.18358540534973145, -0.049738463014364243, -0.22857838869094849, -0.17881974577903748, 0.95442366600036621, -0.24529410898685455, 0.042113348841667175, -0.09709649533033371, -0.13963904976844788, 0.7384827733039856, -0.1688811182975769, 0.27983909845352173, 0.18060474097728729, 0.039840228855609894, 0.29297098517417908, 
  -0.12796443700790405, 0.24555931985378265, 0.21700893342494965, 0.14393991231918335, 0.25544297695159912, -0.017558470368385315, -0.036560483276844025, 0.37403523921966553, 0.21053570508956909, 0.053270995616912842, -0.022427255287766457, 0.27978938817977905, -0.035099372267723083, 0.15493467450141907, -0.32399976253509521, -0.065699785947799683, -0.14558815956115723, 0.17574158310890198, 0.39701151847839355, -0.091256871819496155, 0.2693142294883728, -0.050596024841070175, -0.3770977258682251, 0.24725994467735291, -0.25990766286849976, -0.3650173544883728, -0.18122738599777222, 0.18638831377029419, 0.05963580310344696, -0.10799163579940796, 0.043028209358453751, -0.16391396522521973, 0.09947492927312851, 
  -0.28309056162834167, 0.11278741061687469, 0.23100969195365906, -0.34033674001693726, 0.19477696716785431, -0.053546957671642303, -0.22343048453330994, -0.057264938950538635, -0.016966048628091812, -0.11138610541820526, -0.25632262229919434, 0.32116949558258057, 0.064084775745868683, -0.16354580223560333, -0.21823038160800934, -0.031138109043240547, 0.31761792302131653, -0.0091273514553904533, -0.11759350448846817, 0.13079500198364258, -0.088849209249019623, 0.38239821791648865, -0.0022491514682769775, 0.27396947145462036, -0.15585879981517792, -0.30406031012535095, 0.070768445730209351, -0.50494301319122314, -0.38963046669960022, -0.25095191597938538, 0.19683483242988586, -0.069058269262313843, -0.1100887805223465, 
  0.28187724947929382, 1.2343181371688843, -0.018458237871527672, -0.14771145582199097, 0.057521190494298935, 0.19793583452701569, 0.22269640862941742, 0.055587451905012131, 0.34963887929916382, 0.34819361567497253, -0.078213497996330261, 0.71937030553817749, 1.3550857305526733, 0.055287104099988937, 0.027691192924976349, 0.0015718284994363785, 0.33312129974365234, -0.14655160903930664, -0.15314584970474243, 0.046758711338043213, -0.081288844347000122, -0.20057424902915955, -0.84376347064971924, -0.053370833396911621, 0.32402434945106506, -0.012027174234390259, -0.096717357635498047, -1.2634066343307495, -0.25577166676521301, 0.031165162101387978, -0.35809597373008728, 0.0084726391360163689, 0.26978182792663574, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data5[10*20] = { 
  0.11352069675922394, 0.80750524997711182, -0.33418595790863037, 0.8081669807434082, 0.3630557656288147, 0.064390771090984344, 0.076648242771625519, -0.39680573344230652, 2.0579133033752441, -0.2758866548538208, 0.25258490443229675, -0.15459926426410675, 0.22326862812042236, 0.40765899419784546, -0.68770331144332886, -0.44146168231964111, -0.048923607915639877, -0.10251385718584061, -0.30716800689697266, 0.25670883059501648, 
  -0.31970208883285522, -0.4369276762008667, 0.38401937484741211, 0.29331424832344055, 0.18218617141246796, -0.44504863023757935, -0.37920966744422913, -0.31529122591018677, -0.10716197639703751, -0.021605640649795532, -0.2031455934047699, -0.53248494863510132, 0.54831951856613159, 0.22255754470825195, 0.59460103511810303, 0.76252758502960205, -0.23234495520591736, 0.19262866675853729, 0.08944132924079895, 0.98428016901016235, 
  0.039965938776731491, -0.38882654905319214, 0.16073520481586456, 0.38291803002357483, -0.1629759669303894, -0.54959732294082642, -0.34730437397956848, 0.23024021089076996, -0.43634787201881409, 0.19408105313777924, 0.10489989817142487, 0.23005373775959015, -0.34679904580116272, -0.2207455188035965, 0.49152511358261108, -0.25062263011932373, 0.5498812198638916, -0.36169812083244324, -0.571635901927948, -1.3725227117538452, 
  0.48154780268669128, 0.012781803496181965, 0.45449286699295044, -0.057859990745782852, -0.22034545242786407, 0.55163687467575073, 0.040404945611953735, -0.00047821152838878334, -0.14677202701568604, 0.53104078769683838, 0.36251527070999146, 0.46132403612136841, -0.50832080841064453, -0.44856783747673035, -0.083353430032730103, -0.53258472681045532, 0.15639258921146393, -0.23820580542087555, 0.27158379554748535, -0.78584480285644531, 
  -0.15813003480434418, 0.19398784637451172, -0.36123383045196533, -0.21583405137062073, -0.32168620824813843, 0.23025450110435486, -0.19876071810722351, 0.058703310787677765, -0.3992067277431488, 0.21611952781677246, 0.31377378106117249, 0.18158859014511108, -0.11801924556493759, 0.2041572779417038, 0.090429596602916718, -0.35647633671760559, -0.23105429112911224, 0.34884864091873169, 0.27199095487594604, 0.065098799765110016, 
  -0.34635207056999207, 0.3214879035949707, -0.28126144409179688, 0.26350519061088562, -0.11647129058837891, -0.39143764972686768, -0.81574469804763794, 0.35901525616645813, -0.38142594695091248, -0.15939907729625702, 0.34550654888153076, 0.28441736102104187, -0.13599944114685059, 0.22761677205562592, -0.10328976809978485, -0.27678030729293823, -0.079133592545986176, 0.29098203778266907, -0.26347395777702332, -0.2248263955116272, 
  0.57770806550979614, 0.15187183022499084, -0.26122215390205383, -0.34502938389778137, 0.34140053391456604, 0.33511665463447571, 0.49140185117721558, -0.10597033798694611, -0.092486508190631866, 0.071569457650184631, 0.21286210417747498, 0.21475982666015625, -0.32857397198677063, -0.17732857167720795, -0.25653022527694702, -0.41831424832344055, 0.31760528683662415, -0.097239010035991669, 0.090633891522884369, -0.25580564141273499, 
  -0.1563134491443634, 0.29677700996398926, 0.1302151083946228, 0.12077291309833527, -0.070522546768188477, 0.2552734911441803, 0.29821676015853882, -0.55604606866836548, 0.3654341995716095, -0.29426193237304688, -0.26487213373184204, 0.27091440558433533, 0.34457412362098694, -0.064531378448009491, -0.71414095163345337, 0.47537586092948914, 0.14544428884983063, -0.034448027610778809, 0.32305005192756653, 1.499369740486145, 
  0.12458550930023193, 0.12817336618900299, 0.32835391163825989, 0.12144326418638229, 0.31541377305984497, 0.070099383592605591, -0.71307933330535889, -0.12316830456256866, -0.18741218745708466, 0.0060160369612276554, 0.33676981925964355, 0.010862711817026138, -0.075460463762283325, -0.22844748198986053, 0.4332091212272644, 0.60729432106018066, -0.35514751076698303, 0.24347734451293945, -0.23817069828510284, -1.3575376272201538, 
  -0.082225330173969269, -0.23879890143871307, -0.17847880721092224, 0.044902406632900238, 0.29675948619842529, 0.41996395587921143, -0.26900830864906311, 0.080565981566905975, 0.33031684160232544, -0.3657090961933136, -0.19722659885883331, 0.21931363642215729, -0.24570520222187042, -0.22982326149940491, 0.12457628548145294, -0.073324404656887054, -0.040758527815341949, 0.37585166096687317, -0.036282457411289215, -0.054513338953256607, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data6[4*10] = { 
  -0.52303135395050049, 0.27998250722885132, 1.1305528879165649, -0.16339384019374847, 0.035910818725824356, -0.6211971640586853, -1.4407474994659424, -0.66109466552734375, 0.90988999605178833, -0.21384991705417633, 
  1.1360417604446411, -0.46115466952323914, -0.62938523292541504, -0.66591155529022217, -0.46463590860366821, -0.45141944289207458, 0.069609165191650391, 0.22891286015510559, -0.21644461154937744, 0.16333857178688049, 
  -0.69666856527328491, 1.0160378217697144, -1.4710596799850464, -0.94604361057281494, 0.43076440691947937, -0.56790447235107422, 0.56319046020507812, 0.38078343868255615, 0.2915356457233429, -0.44874435663223267, 
  -0.4033147394657135, -0.85308080911636353, 0.26286786794662476, 0.60866409540176392, 0.17356058955192566, -0.29430609941482544, 1.4235444068908691, 0.0078661786392331123, -1.2108956575393677, -1.725227952003479, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 132, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 2640, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 160, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 16, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 16, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_13_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
