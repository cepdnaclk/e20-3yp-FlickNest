// Mocks generated by Mockito 5.4.6 from annotations
// in flicknest_flutter_frontend/test/features/rooms/presentation/pages/rooms_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flicknest_flutter_frontend/Firebase/deviceService.dart' as _i4;
import 'package:flicknest_flutter_frontend/Firebase/switchModel.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SwitchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSwitchService extends _i1.Mock implements _i2.SwitchService {
  MockSwitchService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> assignDeviceToRoom(String? deviceId, String? newRoomId) =>
      (super.noSuchMethod(
            Invocation.method(#assignDeviceToRoom, [deviceId, newRoomId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<Map<String, dynamic>> getDevicesByRoomStream() =>
      (super.noSuchMethod(
            Invocation.method(#getDevicesByRoomStream, []),
            returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
          )
          as _i3.Stream<Map<String, dynamic>>);

  @override
  _i3.Future<void> updateDeviceState(String? deviceId, bool? newState) =>
      (super.noSuchMethod(
            Invocation.method(#updateDeviceState, [deviceId, newState]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeDeviceFromRoom(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#removeDeviceFromRoom, [deviceId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getAvailableSymbols() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableSymbols, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> addDevice(
    String? deviceName,
    String? symbolId,
    String? roomId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addDevice, [deviceName, symbolId, roomId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceService extends _i1.Mock implements _i4.DeviceService {
  MockDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Map<String, dynamic>> getSymbolsStream() =>
      (super.noSuchMethod(
            Invocation.method(#getSymbolsStream, []),
            returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
          )
          as _i3.Stream<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, String>>> getAvailableSymbols() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableSymbols, []),
            returnValue: _i3.Future<List<Map<String, String>>>.value(
              <Map<String, String>>[],
            ),
          )
          as _i3.Future<List<Map<String, String>>>);

  @override
  _i3.Future<String> getSymbolName(String? symbolId) =>
      (super.noSuchMethod(
            Invocation.method(#getSymbolName, [symbolId]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#getSymbolName, [symbolId]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<List<String>> getUsedSymbols() =>
      (super.noSuchMethod(
            Invocation.method(#getUsedSymbols, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> updateSymbolState(String? symbolId, bool? newState) =>
      (super.noSuchMethod(
            Invocation.method(#updateSymbolState, [symbolId, newState]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addDevice(
    String? deviceName,
    String? symbolId,
    String? roomId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addDevice, [deviceName, symbolId, roomId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeDevice(String? deviceId, String? symbolId) =>
      (super.noSuchMethod(
            Invocation.method(#removeDevice, [deviceId, symbolId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
